
import React, { useEffect, useRef, useState } from 'react'
import Head from 'next/head'
import Image from 'next/image'
import styles from '../styles/Result.module.css'
import { Skeleton } from "baseui/skeleton";
import { ThemeProvider, LightTheme, DarkTheme } from 'baseui';
import { Button, SIZE, SHAPE } from 'baseui/button';
import ArrowIcon from '../src/assets/icons/ArrowIcon.svg'
import RefreshIcon from '../src/assets/icons/reload-icon.svg'
import { useStyletron } from 'baseui';
import { useRouter } from 'next/router';
import { Display4 } from 'baseui/typography';
import { Quote } from '../src/components/Result/Quote';
import { Card } from '../src/components/Result/Card';
import { CardShadow } from '../src/components/Result/CardShadow';



const THEME = {
    light: 'light',
    dark: 'dark',
};


const OnlyOnceUseEffect = (callBack) => {
    const initLoad = useRef(false)

    useEffect(() => {
        if (initLoad.current) {
            callBack()
            initLoad.current = true
            console.log('Run Once');

        }
    });
}


export default function Home({ props }) {
    const [resturantsArray, setResturantsArray] = useState([]);
    const [selectedResturant, setSelectedResturant] = useState([]);
    const [currentDisplay, setCurrentDisplay] = useState(null);
    const [hideRefreshBtn, setHideRefreshBtn] = useState(false);

    console.log('Props', props);

    const [theme, setTheme] = React.useState(THEME.dark);
    const [css, themes] = useStyletron();
    // const [first, setfirst] = useState(second);

    const router = useRouter()
    const query = router.query

    const fetchData = async () => {

        const res = await fetch("/api/hello", {
            headers: { "Content-Type": "application/json; charset=utf-8" },
            method: 'POST',
            body: JSON.stringify({ query })
        })
        const data = await res.json()

        console.log("Data REsult", data);

        const pickRandomResturant = Math.floor(Math.random() * data.length || 10)
        setCurrentDisplay(data[pickRandomResturant])
        setResturantsArray(data)

        setHideRefreshBtn(false)

    }


    console.log('Query refresh', query);

    useEffect(() => {

        // console.log('Init Result', query);
        // Fetch Data and set Result
        fetchData()
    // eslint-disable-next-line react-hooks/exhaustive-deps
    }, [])


    const handleRefreshBtn = () => {
        // new array with all not selected places
        const newRandom = resturantsArray.filter(place => place.name !== currentDisplay.name)


        // Limit selected to only 3, 

        if (selectedResturant.length !== 3) {

            // save current resturant name to selected state
            setSelectedResturant([...selectedResturant, currentDisplay])

            // pick a random and set as current
            setCurrentDisplay(newRandom[Math.floor(Math.random() * newRandom.length)])
        } else {

            // Hide refresh button
            // flash indecision quote
            setHideRefreshBtn(true)

        }

    }

    const handleToggleBtn = (name) => {
        const selectedPlace = resturantsArray.filter(item => item.name === name)[0]
        console.log(selectedPlace);
        setCurrentDisplay(selectedPlace)


    }

    const handleTakeMeThereBtn = () => {

        // redirect to google map 

        window.open(`https://maps.google.com?q=${currentDisplay.name}`)
    }
    return (
        <div
            className={css({
                display: "flex",
                flexDirection: "column",
                // justifyContent:"space-between",
                minHeight: "100vh",
                paddingLeft: "5%",
            })}>


            <Head>
                <title>Results</title>
                <meta name="description" content="Generated by create next app" />
                <link rel="icon" href="/favicon.ico" />
            </Head>

            <ThemeProvider theme={theme === THEME.light ? LightTheme : DarkTheme}>

                <Quote themes={themes} />

                {/* <CardShadow  themes={themes}/> */}


                {
                    resturantsArray.length !== 0 ?



                        <main
                            className={css({
                                display: 'flex',
                                flexDirection: "column",
                                justifyContent: 'space-between',
                                alignItems: "center",
                                color: themes.colors.primaryB
                            })}>

                            <Card
                                themes={themes}
                                name={currentDisplay === null ? "Loading.." : currentDisplay.name}
                                rating={currentDisplay === null ? "Loading.." : currentDisplay.rating}
                                price={currentDisplay === null ? "Loading.." : currentDisplay.price_level}
                                photoRef={currentDisplay === null ? "Loading.." : currentDisplay.photos[0].photo_reference}
                            />

                            {/* Refresh or generate a new resturant button */}
                            <div
                                className={css({
                                    display: 'flex',
                                    // flexDirection: "column",
                                    justifyContent: 'center',
                                    maxWidth: '528px',
                                    marginTop: themes.sizing.scale800,
                                    color: themes.colors.primaryB,
                                })}>

                                {
                                    !hideRefreshBtn ?
                                        <Button shape={SHAPE.circle} onClick={handleRefreshBtn}>
                                            <Image className={styles.refreshIcon} src={RefreshIcon} alt="refresh Icon" />
                                        </Button>
                                        :
                                        <></>
                                }

                            </div>

                            {/* Take me there button,  direct to maps.com/resturant adress */}
                            <div
                                className={css({
                                    display: 'flex',
                                    justifyContent: 'center',
                                    marginTop: themes.sizing.scale1000,
                                    color: themes.colors.primaryB
                                })}>

                                <Button
                                    onClick={() => handleTakeMeThereBtn(currentDisplay.name)}
                                    size={SIZE.large}
                                    $style={{ width: "350px", textAlign: "center" }}>
                                    Take me there
                                    {'\u00A0'}{'\u00A0'} {'\u00A0'}
                                    <Image src={ArrowIcon} alt="Arrow Icon Pin" />
                                </Button>
                            </div>



                            {/* Toggle between selected resturant */}

                            <div
                                className={css({
                                    display: 'flex',
                                    justifyContent: 'space-between',
                                    alignItems: "center",
                                    marginTop: themes.sizing.scale1600,
                                    color: themes.colors.primaryB,
                                    width: "250px",
                                    // background:"red"
                                })}>

                                {
                                    selectedResturant.map((place, index) => {
                                        return <Button
                                            key={index}
                                            onClick={() => handleToggleBtn(place.name)}
                                            className={css({
                                                width: themes.sizing.scale1400,
                                                // margin: themes.sizing.scale400,
                                                textAlign: "center",
                                                margin: themes.sizing.scale500,
                                            })}
                                            size={SIZE.large}
                                            shape={SHAPE.square}
                                        >
                                            <Display4 color={themes.colors.accent700}>
                                                {index + 1}
                                            </Display4>
                                        </Button>
                                    })
                                }

                            </div>

                        </main>

                        :
                        <CardShadow themes={themes} />
                }
            </ThemeProvider >


        </div >
    )
}


// export async function getServerSideProps() {
//   // Fetch data from external API
//   const res = await fetch("http://localhost:3000/api/hello")
//   const data = await res.json()

//   // Pass data to the page via props
//   return { props: { data } }
// }

